@model DoToList.Models.StudyTrackerViewModel

@{
    ViewBag.Title = "Study Tracker";
    var totalTime = Model.StudyTime + Model.BreakTime + Model.OtherTime;

    // Function to format time in hh:mm:ss
    string FormatTime(int minutes)
    {
        int hours = minutes / 60;
        int mins = minutes % 60;
        int secs = (minutes * 60) % 60;
        return $"{hours}h {mins}m {secs}s";
    }
}

<div class="tracker-container">
    <h2>📚 Study & Rest Every Day</h2>

    <form method="post" asp-action="AddSession" class="styled-form">
        <label>Type:</label>
        <select name="Type" required>
            <option value="Study">Study</option>
            <option value="Break">Break</option>
            <option value="Others">Others</option>
        </select>

        <label>Start Time:</label>
        <input type="datetime-local" name="StartTime" required>

        <label>End Time:</label>
        <input type="datetime-local" name="EndTime" required>

        <button type="submit">➕ Add Session</button>
    </form>

    <table class="styled-table">
        <thead>
            <tr>
                <th>Type</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Duration (hh:mm:ss)</th>
                <th>Percentage (%)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var session in Model.Sessions)
            {
                var sessionPercentage = totalTime > 0 ? (session.Duration * 100.0 / totalTime).ToString("0.00") : "0.00";
                <tr>
                    <td>@session.Type</td>
                    <td>@session.StartTime</td>
                    <td>@session.EndTime</td>
                    <td>@FormatTime(session.Duration)</td> <!-- Updated to hh:mm:ss -->
                    <td>@sessionPercentage%</td>
                    <td>
                        <form method="post" asp-action="DeleteSession">
                            <input type="hidden" name="id" value="@session.Id" />
                            <button type="submit" class="delete-btn">🗑️ Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="chart-box">
        <canvas id="studyChart" width="200" height="200"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 <script>
    document.addEventListener("DOMContentLoaded", function () {
        // Retrieve and parse Razor model data
        var studyTime = parseFloat(@Html.Raw(Model.StudyTime)) * 60; // Convert minutes to seconds
        var breakTime = parseFloat(@Html.Raw(Model.BreakTime)) * 60;
        var otherTime = parseFloat(@Html.Raw(Model.OtherTime)) * 60;
        var totalTime = studyTime + breakTime + otherTime;

        var studyPercent = totalTime > 0 ? (studyTime / totalTime * 100).toFixed(2) : 0;
        var breakPercent = totalTime > 0 ? (breakTime / totalTime * 100).toFixed(2) : 0;
        var otherPercent = totalTime > 0 ? (otherTime / totalTime * 100).toFixed(2) : 0;

        function formatTime(seconds) {
            let hours = Math.floor(seconds / 3600);
            let minutes = Math.floor((seconds % 3600) / 60);
            let secs = seconds % 60;
            return `${hours}h ${minutes}m ${secs}s`;
        }

        var ctx = document.getElementById("studyChart");
        if (ctx) {
            var studyChart = new Chart(ctx.getContext("2d"), {
                type: "doughnut",
                data: {
                    labels: [
                        `Study ${studyPercent}%`,
                        `Break ${breakPercent}%`,
                        `Other ${otherPercent}%`
                    ],
                    datasets: [{
                        data: [studyTime, breakTime, otherTime],
                        backgroundColor: ["#FF7F0E", "#1F77B4", "#A0A0A0"],
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    let value = tooltipItem.raw;
                                    let percentage = totalTime > 0 ? (value / totalTime * 100).toFixed(2) : 0;
                                    let label = tooltipItem.chart.data.labels[tooltipItem.dataIndex];
                                    return `${label}: ${percentage}% (${formatTime(value)})`;
                                }
                            }
                        }
                    }
                }
            });
        } else {
            console.error("Chart element not found!");
        }
    });
</script>

 <style>
    .tracker-container {
        max-width: 800px;
        margin: 50px auto;
        padding: 30px;
        background: #f7f7f7;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        font-family: 'Arial', sans-serif;
        color: black; /* Ensure all text is black */
    }

    h2 {
        font-size: 2rem;
        margin-bottom: 20px;
        color: #333;
    }

    .styled-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 20px;
        background: #fff;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .styled-form label {
            font-weight: bold;
            color: black; /* Ensure label text is black */
        }

        .styled-form select, .styled-form input, .styled-form button {
            padding: 12px;
            border: 2px solid #1F77B4;
            border-radius: 6px;
            font-size: 16px;
            margin-bottom: 10px;
            color: black; /* Input and button text color */
        }

        .styled-form button {
            background: #1F77B4;
            color: white;
            cursor: pointer;
            font-weight: bold;
            transition: background 0.3s ease-in-out;
        }

            .styled-form button:hover {
                background: #FF7F0E;
            }

    .styled-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .styled-table th, .styled-table td {
            padding: 12px;
            border: 1px solid #ddd;
            font-size: 16px;
            color: black; /* Table text color */
        }

        .styled-table th {
            background: #1F77B4;
            color: white;
            font-weight: bold;
        }

        .styled-table tr:hover {
            background: #f0f0f0;
        }

    .delete-btn {
        background: #d9534f;
        color: white;
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
    }

        .delete-btn:hover {
            background: #c9302c;
        }

    .chart-box {
        margin-top: 30px;
        padding: 20px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
</style>
